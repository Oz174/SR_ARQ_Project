//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Message.msg.
//

#ifndef __MESSAGE_M_H
#define __MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Message;
/**
 * Class generated from <tt>Message.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet Message
 * {
 *     int Header;  //data_Seq no.
 *     string Payload; //after byte stuffing
 *     char Trailer; //checksum
 *     int Type; //0:data , 1:ack , 2:nack 
 *     int ack_no; //ack/nack
 * }
 * </pre>
 */
class Message : public ::omnetpp::cPacket
{
  protected:
    int Header = 0;
    omnetpp::opp_string Payload;
    char Trailer = 0;
    int Type = 0;
    int ack_no = 0;

  private:
    void copy(const Message& other);

  protected:
    bool operator==(const Message&) = delete;

  public:
    Message(const char *name=nullptr, short kind=0);
    Message(const Message& other);
    virtual ~Message();
    Message& operator=(const Message& other);
    virtual Message *dup() const override {return new Message(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getHeader() const;
    virtual void setHeader(int Header);

    virtual const char * getPayload() const;
    virtual void setPayload(const char * Payload);

    virtual char getTrailer() const;
    virtual void setTrailer(char Trailer);

    virtual int getType() const;
    virtual void setType(int Type);

    virtual int getAck_no() const;
    virtual void setAck_no(int ack_no);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Message& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Message& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Message *fromAnyPtr(any_ptr ptr) { return check_and_cast<Message*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MESSAGE_M_H

